{
  "version": 3,
  "sources": ["../../vuetify/src/components/VTextarea/VTextarea.tsx", "../../vuetify/src/components/VCounter/VCounter.tsx", "../../vuetify/src/components/VField/VField.tsx", "../../vuetify/src/components/VField/VFieldLabel.tsx"],
  "sourcesContent": ["// Styles\nimport './VTextarea.sass'\nimport '../VTextField/VTextField.sass'\n\n// Components\nimport { VCounter } from '@/components/VCounter/VCounter'\nimport { VField } from '@/components/VField'\nimport { makeVFieldProps } from '@/components/VField/VField'\nimport { makeVInputProps, VInput } from '@/components/VInput/VInput'\n\n// Composables\nimport { useFocus } from '@/composables/focus'\nimport { forwardRefs } from '@/composables/forwardRefs'\nimport { useProxiedModel } from '@/composables/proxiedModel'\n\n// Directives\nimport Intersect from '@/directives/intersect'\n\n// Utilities\nimport { computed, nextTick, onBeforeUnmount, onMounted, ref, shallowRef, watch, watchEffect } from 'vue'\nimport { callEvent, clamp, convertToUnit, filterInputAttrs, genericComponent, propsFactory, useRender } from '@/util'\n\n// Types\nimport type { PropType } from 'vue'\nimport type { VCounterSlot } from '@/components/VCounter/VCounter'\nimport type { VFieldSlots } from '@/components/VField/VField'\nimport type { VInputSlots } from '@/components/VInput/VInput'\n\nexport const makeVTextareaProps = propsFactory({\n  autoGrow: Boolean,\n  autofocus: Boolean,\n  counter: [Boolean, Number, String] as PropType<true | number | string>,\n  counterValue: Function as PropType<(value: any) => number>,\n  prefix: String,\n  placeholder: String,\n  persistentPlaceholder: Boolean,\n  persistentCounter: Boolean,\n  noResize: Boolean,\n  rows: {\n    type: [Number, String],\n    default: 5,\n    validator: (v: any) => !isNaN(parseFloat(v)),\n  },\n  maxRows: {\n    type: [Number, String],\n    validator: (v: any) => !isNaN(parseFloat(v)),\n  },\n  suffix: String,\n  modelModifiers: Object as PropType<Record<string, boolean>>,\n\n  ...makeVInputProps(),\n  ...makeVFieldProps(),\n}, 'VTextarea')\n\ntype VTextareaSlots = Omit<VInputSlots & VFieldSlots, 'default'> & {\n  counter: VCounterSlot\n}\n\nexport const VTextarea = genericComponent<VTextareaSlots>()({\n  name: 'VTextarea',\n\n  directives: { Intersect },\n\n  inheritAttrs: false,\n\n  props: makeVTextareaProps(),\n\n  emits: {\n    'click:control': (e: MouseEvent) => true,\n    'mousedown:control': (e: MouseEvent) => true,\n    'update:focused': (focused: boolean) => true,\n    'update:modelValue': (val: string) => true,\n  },\n\n  setup (props, { attrs, emit, slots }) {\n    const model = useProxiedModel(props, 'modelValue')\n    const { isFocused, focus, blur } = useFocus(props)\n    const counterValue = computed(() => {\n      return typeof props.counterValue === 'function'\n        ? props.counterValue(model.value)\n        : (model.value || '').toString().length\n    })\n    const max = computed(() => {\n      if (attrs.maxlength) return attrs.maxlength as string | number\n\n      if (\n        !props.counter ||\n        (typeof props.counter !== 'number' &&\n        typeof props.counter !== 'string')\n      ) return undefined\n\n      return props.counter\n    })\n\n    function onIntersect (\n      isIntersecting: boolean,\n      entries: IntersectionObserverEntry[]\n    ) {\n      if (!props.autofocus || !isIntersecting) return\n\n      (entries[0].target as HTMLInputElement)?.focus?.()\n    }\n\n    const vInputRef = ref<VInput>()\n    const vFieldRef = ref<VInput>()\n    const controlHeight = shallowRef('')\n    const textareaRef = ref<HTMLInputElement>()\n    const isActive = computed(() => (\n      props.persistentPlaceholder ||\n      isFocused.value ||\n      props.active\n    ))\n\n    function onFocus () {\n      if (textareaRef.value !== document.activeElement) {\n        textareaRef.value?.focus()\n      }\n\n      if (!isFocused.value) focus()\n    }\n    function onControlClick (e: MouseEvent) {\n      onFocus()\n\n      emit('click:control', e)\n    }\n    function onControlMousedown (e: MouseEvent) {\n      emit('mousedown:control', e)\n    }\n    function onClear (e: MouseEvent) {\n      e.stopPropagation()\n\n      onFocus()\n\n      nextTick(() => {\n        model.value = ''\n\n        callEvent(props['onClick:clear'], e)\n      })\n    }\n    function onInput (e: Event) {\n      const el = e.target as HTMLTextAreaElement\n      model.value = el.value\n      if (props.modelModifiers?.trim) {\n        const caretPosition = [el.selectionStart, el.selectionEnd]\n        nextTick(() => {\n          el.selectionStart = caretPosition[0]\n          el.selectionEnd = caretPosition[1]\n        })\n      }\n    }\n\n    const sizerRef = ref<HTMLTextAreaElement>()\n    const rows = ref(Number(props.rows))\n    const isPlainOrUnderlined = computed(() => ['plain', 'underlined'].includes(props.variant))\n    watchEffect(() => {\n      if (!props.autoGrow) rows.value = Number(props.rows)\n    })\n    function calculateInputHeight () {\n      if (!props.autoGrow) return\n\n      nextTick(() => {\n        if (!sizerRef.value || !vFieldRef.value) return\n\n        const style = getComputedStyle(sizerRef.value)\n        const fieldStyle = getComputedStyle(vFieldRef.value.$el)\n\n        const padding = parseFloat(style.getPropertyValue('--v-field-padding-top')) +\n          parseFloat(style.getPropertyValue('--v-input-padding-top')) +\n          parseFloat(style.getPropertyValue('--v-field-padding-bottom'))\n\n        const height = sizerRef.value.scrollHeight\n        const lineHeight = parseFloat(style.lineHeight)\n        const minHeight = Math.max(\n          parseFloat(props.rows) * lineHeight + padding,\n          parseFloat(fieldStyle.getPropertyValue('--v-input-control-height'))\n        )\n        const maxHeight = parseFloat(props.maxRows!) * lineHeight + padding || Infinity\n        const newHeight = clamp(height ?? 0, minHeight, maxHeight)\n        rows.value = Math.floor((newHeight - padding) / lineHeight)\n\n        controlHeight.value = convertToUnit(newHeight)\n      })\n    }\n\n    onMounted(calculateInputHeight)\n    watch(model, calculateInputHeight)\n    watch(() => props.rows, calculateInputHeight)\n    watch(() => props.maxRows, calculateInputHeight)\n    watch(() => props.density, calculateInputHeight)\n\n    let observer: ResizeObserver | undefined\n    watch(sizerRef, val => {\n      if (val) {\n        observer = new ResizeObserver(calculateInputHeight)\n        observer.observe(sizerRef.value!)\n      } else {\n        observer?.disconnect()\n      }\n    })\n    onBeforeUnmount(() => {\n      observer?.disconnect()\n    })\n\n    useRender(() => {\n      const hasCounter = !!(slots.counter || props.counter || props.counterValue)\n      const hasDetails = !!(hasCounter || slots.details)\n      const [rootAttrs, inputAttrs] = filterInputAttrs(attrs)\n      const { modelValue: _, ...inputProps } = VInput.filterProps(props)\n      const fieldProps = VField.filterProps(props)\n\n      return (\n        <VInput\n          ref={ vInputRef }\n          v-model={ model.value }\n          class={[\n            'v-textarea v-text-field',\n            {\n              'v-textarea--prefixed': props.prefix,\n              'v-textarea--suffixed': props.suffix,\n              'v-text-field--prefixed': props.prefix,\n              'v-text-field--suffixed': props.suffix,\n              'v-textarea--auto-grow': props.autoGrow,\n              'v-textarea--no-resize': props.noResize || props.autoGrow,\n              'v-input--plain-underlined': isPlainOrUnderlined.value,\n            },\n            props.class,\n          ]}\n          style={ props.style }\n          { ...rootAttrs }\n          { ...inputProps }\n          centerAffix={ rows.value === 1 && !isPlainOrUnderlined.value }\n          focused={ isFocused.value }\n        >\n          {{\n            ...slots,\n            default: ({\n              id,\n              isDisabled,\n              isDirty,\n              isReadonly,\n              isValid,\n            }) => (\n              <VField\n                ref={ vFieldRef }\n                style={{\n                  '--v-textarea-control-height': controlHeight.value,\n                }}\n                onClick={ onControlClick }\n                onMousedown={ onControlMousedown }\n                onClick:clear={ onClear }\n                onClick:prependInner={ props['onClick:prependInner'] }\n                onClick:appendInner={ props['onClick:appendInner'] }\n                { ...fieldProps }\n                id={ id.value }\n                active={ isActive.value || isDirty.value }\n                centerAffix={ rows.value === 1 && !isPlainOrUnderlined.value }\n                dirty={ isDirty.value || props.dirty }\n                disabled={ isDisabled.value }\n                focused={ isFocused.value }\n                error={ isValid.value === false }\n              >\n                {{\n                  ...slots,\n                  default: ({\n                    props: { class: fieldClass, ...slotProps },\n                  }) => (\n                    <>\n                      { props.prefix && (\n                        <span class=\"v-text-field__prefix\">\n                          { props.prefix }\n                        </span>\n                      )}\n\n                      <textarea\n                        ref={ textareaRef }\n                        class={ fieldClass }\n                        value={ model.value }\n                        onInput={ onInput }\n                        v-intersect={[{\n                          handler: onIntersect,\n                        }, null, ['once']]}\n                        autofocus={ props.autofocus }\n                        readonly={ isReadonly.value }\n                        disabled={ isDisabled.value }\n                        placeholder={ props.placeholder }\n                        rows={ props.rows }\n                        name={ props.name }\n                        onFocus={ onFocus }\n                        onBlur={ blur }\n                        { ...slotProps }\n                        { ...inputAttrs }\n                      />\n\n                      { props.autoGrow && (\n                        <textarea\n                          class={[\n                            fieldClass,\n                            'v-textarea__sizer',\n                          ]}\n                          id={ `${slotProps.id}-sizer` }\n                          v-model={ model.value }\n                          ref={ sizerRef }\n                          readonly\n                          aria-hidden=\"true\"\n                        />\n                      )}\n\n                      { props.suffix && (\n                        <span class=\"v-text-field__suffix\">\n                          { props.suffix }\n                        </span>\n                      )}\n                    </>\n                  ),\n                }}\n              </VField>\n            ),\n            details: hasDetails ? slotProps => (\n              <>\n                { slots.details?.(slotProps) }\n\n                { hasCounter && (\n                  <>\n                    <span />\n\n                    <VCounter\n                      active={ props.persistentCounter || isFocused.value }\n                      value={ counterValue.value }\n                      max={ max.value }\n                      disabled={ props.disabled }\n                      v-slots:default={ slots.counter }\n                    />\n                  </>\n                )}\n              </>\n            ) : undefined,\n          }}\n        </VInput>\n      )\n    })\n\n    return forwardRefs({}, vInputRef, vFieldRef, textareaRef)\n  },\n})\n\nexport type VTextarea = InstanceType<typeof VTextarea>\n", "// Styles\nimport './VCounter.sass'\n\n// Components\nimport { VSlideYTransition } from '@/components/transitions'\n\n// Composables\nimport { makeComponentProps } from '@/composables/component'\nimport { makeTransitionProps, MaybeTransition } from '@/composables/transition'\n\n// Utilities\nimport { computed } from 'vue'\nimport { genericComponent, propsFactory, useRender } from '@/util'\n\n// Types\nimport type { Component } from 'vue'\n\nexport const makeVCounterProps = propsFactory({\n  active: Boolean,\n  disabled: Boolean,\n  max: [Number, String],\n  value: {\n    type: [Number, String],\n    default: 0,\n  },\n\n  ...makeComponentProps(),\n  ...makeTransitionProps({\n    transition: { component: VSlideYTransition as Component },\n  }),\n}, 'VCounter')\n\nexport type VCounterSlot = {\n  counter: string\n  max: string | number | undefined\n  value: string | number | undefined\n}\n\ntype VCounterSlots = {\n  default: VCounterSlot\n}\n\nexport const VCounter = genericComponent<VCounterSlots>()({\n  name: 'VCounter',\n\n  functional: true,\n\n  props: makeVCounterProps(),\n\n  setup (props, { slots }) {\n    const counter = computed(() => {\n      return props.max ? `${props.value} / ${props.max}` : String(props.value)\n    })\n\n    useRender(() => (\n      <MaybeTransition transition={ props.transition }>\n        <div\n          v-show={ props.active }\n          class={[\n            'v-counter',\n            {\n              'text-error': props.max && !props.disabled &&\n                parseFloat(props.value) > parseFloat(props.max),\n            },\n            props.class,\n          ]}\n          style={ props.style }\n        >\n          { slots.default\n            ? slots.default({\n              counter: counter.value,\n              max: props.max,\n              value: props.value,\n            })\n            : counter.value\n          }\n        </div>\n      </MaybeTransition>\n    ))\n\n    return {}\n  },\n})\n\nexport type VCounter = InstanceType<typeof VCounter>\n", "// Styles\nimport './VField.sass'\n\n// Components\nimport { VFieldLabel } from './VFieldLabel'\nimport { VExpandXTransition } from '@/components/transitions'\nimport { VDefaultsProvider } from '@/components/VDefaultsProvider'\nimport { useInputIcon } from '@/components/VInput/InputIcon'\n\n// Composables\nimport { useBackgroundColor, useTextColor } from '@/composables/color'\nimport { makeComponentProps } from '@/composables/component'\nimport { makeFocusProps, useFocus } from '@/composables/focus'\nimport { IconValue } from '@/composables/icons'\nimport { LoaderSlot, makeLoaderProps, useLoader } from '@/composables/loader'\nimport { useRtl } from '@/composables/locale'\nimport { makeRoundedProps, useRounded } from '@/composables/rounded'\nimport { makeThemeProps, provideTheme } from '@/composables/theme'\n\n// Utilities\nimport { computed, ref, toRef, watch } from 'vue'\nimport {\n  animate,\n  convertToUnit,\n  EventProp,\n  genericComponent,\n  getUid,\n  nullifyTransforms,\n  propsFactory,\n  standardEasing,\n  useRender,\n} from '@/util'\n\n// Types\nimport type { PropType, Ref } from 'vue'\nimport type { LoaderSlotProps } from '@/composables/loader'\nimport type { GenericProps } from '@/util'\n\nconst allowedVariants = ['underlined', 'outlined', 'filled', 'solo', 'solo-inverted', 'solo-filled', 'plain'] as const\ntype Variant = typeof allowedVariants[number]\n\nexport interface DefaultInputSlot {\n  isActive: Ref<boolean>\n  isFocused: Ref<boolean>\n  controlRef: Ref<HTMLElement | undefined>\n  focus: () => void\n  blur: () => void\n}\n\nexport interface VFieldSlot extends DefaultInputSlot {\n  props: Record<string, unknown>\n}\n\nexport const makeVFieldProps = propsFactory({\n  appendInnerIcon: IconValue,\n  bgColor: String,\n  clearable: Boolean,\n  clearIcon: {\n    type: IconValue,\n    default: '$clear',\n  },\n  active: Boolean,\n  centerAffix: {\n    type: Boolean,\n    default: undefined,\n  },\n  color: String,\n  baseColor: String,\n  dirty: Boolean,\n  disabled: {\n    type: Boolean,\n    default: null,\n  },\n  error: Boolean,\n  flat: Boolean,\n  label: String,\n  persistentClear: Boolean,\n  prependInnerIcon: IconValue,\n  reverse: Boolean,\n  singleLine: Boolean,\n  variant: {\n    type: String as PropType<Variant>,\n    default: 'filled',\n    validator: (v: any) => allowedVariants.includes(v),\n  },\n\n  'onClick:clear': EventProp<[MouseEvent]>(),\n  'onClick:appendInner': EventProp<[MouseEvent]>(),\n  'onClick:prependInner': EventProp<[MouseEvent]>(),\n\n  ...makeComponentProps(),\n  ...makeLoaderProps(),\n  ...makeRoundedProps(),\n  ...makeThemeProps(),\n}, 'VField')\n\nexport type VFieldSlots = {\n  clear: DefaultInputSlot & { props: Record<string, any> }\n  'prepend-inner': DefaultInputSlot\n  'append-inner': DefaultInputSlot\n  label: DefaultInputSlot & { label: string | undefined, props: Record<string, any> }\n  loader: LoaderSlotProps\n  default: VFieldSlot\n}\n\nexport const VField = genericComponent<new <T>(\n  props: {\n    modelValue?: T\n    'onUpdate:modelValue'?: (value: T) => void\n  },\n  slots: VFieldSlots\n) => GenericProps<typeof props, typeof slots>>()({\n  name: 'VField',\n\n  inheritAttrs: false,\n\n  props: {\n    id: String,\n\n    ...makeFocusProps(),\n    ...makeVFieldProps(),\n  },\n\n  emits: {\n    'update:focused': (focused: boolean) => true,\n    'update:modelValue': (value: any) => true,\n  },\n\n  setup (props, { attrs, emit, slots }) {\n    const { themeClasses } = provideTheme(props)\n    const { loaderClasses } = useLoader(props)\n    const { focusClasses, isFocused, focus, blur } = useFocus(props)\n    const { InputIcon } = useInputIcon(props)\n    const { roundedClasses } = useRounded(props)\n    const { rtlClasses } = useRtl()\n\n    const isActive = computed(() => props.dirty || props.active)\n    const hasLabel = computed(() => !!(props.label || slots.label))\n    const hasFloatingLabel = computed(() => !props.singleLine && hasLabel.value)\n\n    const uid = getUid()\n    const id = computed(() => props.id || `input-${uid}`)\n    const messagesId = computed(() => `${id.value}-messages`)\n\n    const labelRef = ref<VFieldLabel>()\n    const floatingLabelRef = ref<VFieldLabel>()\n    const controlRef = ref<HTMLElement>()\n    const isPlainOrUnderlined = computed(() => ['plain', 'underlined'].includes(props.variant))\n\n    const { backgroundColorClasses, backgroundColorStyles } = useBackgroundColor(toRef(props, 'bgColor'))\n    const { textColorClasses, textColorStyles } = useTextColor(computed(() => {\n      return props.error || props.disabled ? undefined\n        : isActive.value && isFocused.value ? props.color\n        : props.baseColor\n    }))\n\n    watch(isActive, val => {\n      if (hasFloatingLabel.value) {\n        const el: HTMLElement = labelRef.value!.$el\n        const targetEl: HTMLElement = floatingLabelRef.value!.$el\n\n        requestAnimationFrame(() => {\n          const rect = nullifyTransforms(el)\n          const targetRect = targetEl.getBoundingClientRect()\n\n          const x = targetRect.x - rect.x\n          const y = targetRect.y - rect.y - (rect.height / 2 - targetRect.height / 2)\n\n          const targetWidth = targetRect.width / 0.75\n          const width = Math.abs(targetWidth - rect.width) > 1\n            ? { maxWidth: convertToUnit(targetWidth) }\n            : undefined\n\n          const style = getComputedStyle(el)\n          const targetStyle = getComputedStyle(targetEl)\n          const duration = parseFloat(style.transitionDuration) * 1000 || 150\n          const scale = parseFloat(targetStyle.getPropertyValue('--v-field-label-scale'))\n          const color = targetStyle.getPropertyValue('color')\n\n          el.style.visibility = 'visible'\n          targetEl.style.visibility = 'hidden'\n\n          animate(el, {\n            transform: `translate(${x}px, ${y}px) scale(${scale})`,\n            color,\n            ...width,\n          }, {\n            duration,\n            easing: standardEasing,\n            direction: val ? 'normal' : 'reverse',\n          }).finished.then(() => {\n            el.style.removeProperty('visibility')\n            targetEl.style.removeProperty('visibility')\n          })\n        })\n      }\n    }, { flush: 'post' })\n\n    const slotProps = computed<DefaultInputSlot>(() => ({\n      isActive,\n      isFocused,\n      controlRef,\n      blur,\n      focus,\n    }))\n\n    function onClick (e: MouseEvent) {\n      if (e.target !== document.activeElement) {\n        e.preventDefault()\n      }\n    }\n\n    useRender(() => {\n      const isOutlined = props.variant === 'outlined'\n      const hasPrepend = !!(slots['prepend-inner'] || props.prependInnerIcon)\n      const hasClear = !!(props.clearable || slots.clear) && !props.disabled\n      const hasAppend = !!(slots['append-inner'] || props.appendInnerIcon || hasClear)\n      const label = () => (\n        slots.label\n          ? slots.label({\n            ...slotProps.value,\n            label: props.label,\n            props: { for: id.value },\n          })\n          : props.label\n      )\n\n      return (\n        <div\n          class={[\n            'v-field',\n            {\n              'v-field--active': isActive.value,\n              'v-field--appended': hasAppend,\n              'v-field--center-affix': props.centerAffix ?? !isPlainOrUnderlined.value,\n              'v-field--disabled': props.disabled,\n              'v-field--dirty': props.dirty,\n              'v-field--error': props.error,\n              'v-field--flat': props.flat,\n              'v-field--has-background': !!props.bgColor,\n              'v-field--persistent-clear': props.persistentClear,\n              'v-field--prepended': hasPrepend,\n              'v-field--reverse': props.reverse,\n              'v-field--single-line': props.singleLine,\n              'v-field--no-label': !label(),\n              [`v-field--variant-${props.variant}`]: true,\n            },\n            themeClasses.value,\n            backgroundColorClasses.value,\n            focusClasses.value,\n            loaderClasses.value,\n            roundedClasses.value,\n            rtlClasses.value,\n            props.class,\n          ]}\n          style={[\n            backgroundColorStyles.value,\n            props.style,\n          ]}\n          onClick={ onClick }\n          { ...attrs }\n        >\n          <div class=\"v-field__overlay\" />\n\n          <LoaderSlot\n            name=\"v-field\"\n            active={ !!props.loading }\n            color={ props.error ? 'error' : (typeof props.loading === 'string' ? props.loading : props.color) }\n            v-slots={{ default: slots.loader }}\n          />\n\n          { hasPrepend && (\n            <div key=\"prepend\" class=\"v-field__prepend-inner\">\n              { props.prependInnerIcon && (\n                <InputIcon\n                  key=\"prepend-icon\"\n                  name=\"prependInner\"\n                />\n              )}\n\n              { slots['prepend-inner']?.(slotProps.value) }\n            </div>\n          )}\n\n          <div class=\"v-field__field\" data-no-activator=\"\">\n            {['filled', 'solo', 'solo-inverted', 'solo-filled'].includes(props.variant) && hasFloatingLabel.value && (\n              <VFieldLabel\n                key=\"floating-label\"\n                ref={ floatingLabelRef }\n                class={[textColorClasses.value]}\n                floating\n                for={ id.value }\n                style={ textColorStyles.value }\n              >\n                { label() }\n              </VFieldLabel>\n            )}\n\n            { hasLabel.value && (\n              <VFieldLabel key=\"label\" ref={ labelRef } for={ id.value }>\n                { label() }\n              </VFieldLabel>\n            )}\n\n            { slots.default?.({\n              ...slotProps.value,\n              props: {\n                id: id.value,\n                class: 'v-field__input',\n                'aria-describedby': messagesId.value,\n              },\n              focus,\n              blur,\n            } as VFieldSlot)}\n          </div>\n\n          { hasClear && (\n            <VExpandXTransition key=\"clear\">\n              <div\n                class=\"v-field__clearable\"\n                v-show={ props.dirty }\n                onMousedown={ (e: MouseEvent) => {\n                  e.preventDefault()\n                  e.stopPropagation()\n                }}\n              >\n              <VDefaultsProvider\n                defaults={{\n                  VIcon: {\n                    icon: props.clearIcon,\n                  },\n                }}\n              >\n                { slots.clear\n                  ? slots.clear({\n                    ...slotProps.value,\n                    props: {\n                      onFocus: focus,\n                      onBlur: blur,\n                      onClick: props['onClick:clear'],\n                    },\n                  })\n                  : (\n                    <InputIcon\n                      name=\"clear\"\n                      onFocus={ focus }\n                      onBlur={ blur }\n                    />\n                  )}\n                </VDefaultsProvider>\n              </div>\n            </VExpandXTransition>\n          )}\n\n          { hasAppend && (\n            <div key=\"append\" class=\"v-field__append-inner\">\n              { slots['append-inner']?.(slotProps.value) }\n\n              { props.appendInnerIcon && (\n                <InputIcon\n                  key=\"append-icon\"\n                  name=\"appendInner\"\n                />\n              )}\n            </div>\n          )}\n\n          <div\n            class={[\n              'v-field__outline',\n              textColorClasses.value,\n            ]}\n            style={ textColorStyles.value }\n          >\n            { isOutlined && (\n              <>\n                <div class=\"v-field__outline__start\" />\n\n                { hasFloatingLabel.value && (\n                  <div class=\"v-field__outline__notch\">\n                    <VFieldLabel ref={ floatingLabelRef } floating for={ id.value }>\n                      { label() }\n                    </VFieldLabel>\n                  </div>\n                )}\n\n                <div class=\"v-field__outline__end\" />\n              </>\n            )}\n\n            { isPlainOrUnderlined.value && hasFloatingLabel.value && (\n              <VFieldLabel ref={ floatingLabelRef } floating for={ id.value }>\n                { label() }\n              </VFieldLabel>\n            )}\n          </div>\n        </div>\n      )\n    })\n\n    return {\n      controlRef,\n    }\n  },\n})\n\nexport type VField = InstanceType<typeof VField>\n", "// Components\nimport { VLabel } from '@/components/VLabel'\n\n// Composables\nimport { makeComponentProps } from '@/composables/component'\n\n// Utilities\nimport { genericComponent, propsFactory, useRender } from '@/util'\n\nexport const makeVFieldLabelProps = propsFactory({\n  floating: Boolean,\n\n  ...makeComponentProps(),\n}, 'VFieldLabel')\n\nexport const VFieldLabel = genericComponent()({\n  name: 'VFieldLabel',\n\n  props: makeVFieldLabelProps(),\n\n  setup (props, { slots }) {\n    useRender(() => (\n      <VLabel\n        class={[\n          'v-field-label',\n          { 'v-field-label--floating': props.floating },\n          props.class,\n        ]}\n        style={ props.style }\n        aria-hidden={ props.floating || undefined }\n        v-slots={ slots }\n      />\n    ))\n\n    return {}\n  },\n})\n\nexport type VFieldLabel = InstanceType<typeof VFieldLabel>\n"],
  "mappings": "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",
  "names": ["makeVCounterProps", "propsFactory", "active", "Boolean", "disabled", "max", "Number", "String", "value", "type", "default", "makeComponentProps", "makeTransitionProps", "transition", "component", "VSlideYTransition", "VCounter", "genericComponent", "name", "functional", "props", "setup", "_ref", "slots", "counter", "computed", "useRender", "_createVNode", "MaybeTransition", "_withDirectives", "parseFloat", "class", "style", "_vShow", "makeVFieldLabelProps", "propsFactory", "floating", "Boolean", "makeComponentProps", "VFieldLabel", "genericComponent", "name", "props", "setup", "_ref", "slots", "useRender", "_createVNode", "VLabel", "class", "style", "undefined", "allowedVariants", "makeVFieldProps", "propsFactory", "appendInnerIcon", "IconValue", "bgColor", "String", "clearable", "Boolean", "clearIcon", "type", "default", "active", "centerAffix", "undefined", "color", "baseColor", "dirty", "disabled", "error", "flat", "label", "persistentClear", "prependInnerIcon", "reverse", "singleLine", "variant", "validator", "v", "includes", "EventProp", "makeComponentProps", "makeLoaderProps", "makeRoundedProps", "makeThemeProps", "VField", "genericComponent", "name", "inheritAttrs", "props", "id", "makeFocusProps", "emits", "focused", "value", "setup", "_ref", "attrs", "emit", "slots", "themeClasses", "provideTheme", "loaderClasses", "useLoader", "focusClasses", "isFocused", "focus", "blur", "useFocus", "InputIcon", "useInputIcon", "roundedClasses", "useRounded", "rtlClasses", "useRtl", "isActive", "computed", "hasLabel", "hasFloatingLabel", "uid", "getUid", "messagesId", "labelRef", "ref", "floatingLabelRef", "controlRef", "isPlainOrUnderlined", "backgroundColorClasses", "backgroundColorStyles", "useBackgroundColor", "toRef", "textColorClasses", "textColorStyles", "useTextColor", "watch", "val", "el", "$el", "targetEl", "requestAnimationFrame", "rect", "nullifyTransforms", "targetRect", "getBoundingClientRect", "x", "y", "height", "targetWidth", "width", "Math", "abs", "maxWidth", "convertToUnit", "style", "getComputedStyle", "targetStyle", "duration", "parseFloat", "transitionDuration", "scale", "getPropertyValue", "visibility", "animate", "transform", "easing", "standardEasing", "direction", "finished", "then", "removeProperty", "flush", "slotProps", "onClick", "e", "target", "document", "activeElement", "preventDefault", "useRender", "isOutlined", "hasPrepend", "hasClear", "clear", "hasAppend", "for", "_createVNode", "_mergeProps", "class", "LoaderSlot", "loading", "loader", "VFieldLabel", "VExpandXTransition", "_withDirectives", "stopPropagation", "VDefaultsProvider", "VIcon", "icon", "onFocus", "onBlur", "_vShow", "_Fragment", "makeVTextareaProps", "propsFactory", "autoGrow", "Boolean", "autofocus", "counter", "Number", "String", "counterValue", "Function", "prefix", "placeholder", "persistentPlaceholder", "persistentCounter", "noResize", "rows", "type", "default", "validator", "v", "isNaN", "parseFloat", "maxRows", "suffix", "modelModifiers", "Object", "makeVInputProps", "makeVFieldProps", "VTextarea", "genericComponent", "name", "directives", "Intersect", "inheritAttrs", "props", "emits", "e", "focused", "val", "setup", "_ref", "attrs", "emit", "slots", "model", "useProxiedModel", "isFocused", "focus", "blur", "useFocus", "computed", "value", "toString", "length", "max", "maxlength", "undefined", "onIntersect", "isIntersecting", "entries", "target", "vInputRef", "ref", "vFieldRef", "controlHeight", "shallowRef", "textareaRef", "isActive", "active", "onFocus", "document", "activeElement", "onControlClick", "onControlMousedown", "onClear", "stopPropagation", "nextTick", "callEvent", "onInput", "el", "trim", "caretPosition", "selectionStart", "selectionEnd", "sizerRef", "isPlainOrUnderlined", "includes", "variant", "watchEffect", "calculateInputHeight", "style", "getComputedStyle", "fieldStyle", "$el", "padding", "getPropertyValue", "height", "scrollHeight", "lineHeight", "minHeight", "Math", "maxHeight", "Infinity", "newHeight", "clamp", "floor", "convertToUnit", "onMounted", "watch", "density", "observer", "ResizeObserver", "observe", "disconnect", "onBeforeUnmount", "useRender", "hasCounter", "hasDetails", "details", "rootAttrs", "inputAttrs", "filterInputAttrs", "modelValue", "_", "inputProps", "VInput", "filterProps", "fieldProps", "VField", "_createVNode", "_mergeProps", "$event", "class", "_ref2", "id", "isDisabled", "isDirty", "isReadonly", "isValid", "dirty", "_ref3", "fieldClass", "slotProps", "_Fragment", "_withDirectives", "_resolveDirective", "handler", "once", "_vModelText", "VCounter", "disabled", "forwardRefs"]
}
